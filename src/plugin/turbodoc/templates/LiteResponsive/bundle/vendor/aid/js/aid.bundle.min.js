window.aid={
    objects:{
        // present at node-aid
     ganoToGcna:(obj)=> {
    const recurse = (obj, depth = 0,isDocJsonNode=false,parent=null) => {
      var result = [];
  
       
      for(const key in obj) { 
        if(obj[key]['@']) isDocJsonNode = true;
        if(obj.hasOwnProperty(key)) { 
             if(obj[key]['@']){
            var node = obj[key]['@']; 
            const children = Object.fromEntries(Object.entries(obj[key]).filter(([key]) => key !== '@'));
        
           if(Object.keys(children).length==0){
            result.push(node); 
           }else{
            node.children =recurse(children, depth + 1,isDocJsonNode,node); 
            result.push(node); 
           }
          }else{
            if(!isDocJsonNode){
                //  also converts other stuff that is not a jsondoc node
                // objects
                if(typeof obj[key] === 'object' && obj[key] !== null) {
                  var node = {name:key,children:recurse(obj[key],depth,isDocJsonNode,obj[key])}
                 result.push(node)
                }else{
                  // put as keys 
                  if(parent)  parent[key] = obj[key];
                  //put as child
                  //result.push(obj)
 
                }
            }
              
        
          }
        }
      }
    return result;
    } 
    return recurse(obj);
    }
       
 
    }
}